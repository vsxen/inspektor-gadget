// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type graphGraphKeyT struct {
	ContainerNetns uint64
	PktType        uint32
	Ip             uint32
	Proto          uint16
	Port           uint16
	_              [4]byte
}

// loadGraph returns the embedded CollectionSpec for graph.
func loadGraph() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_GraphBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load graph: %w", err)
	}

	return spec, err
}

// loadGraphObjects loads graph and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*graphObjects
//	*graphPrograms
//	*graphMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadGraphObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadGraph()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// graphSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type graphSpecs struct {
	graphProgramSpecs
	graphMapSpecs
}

// graphSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type graphProgramSpecs struct {
	IgTraceNet *ebpf.ProgramSpec `ebpf:"ig_trace_net"`
}

// graphMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type graphMapSpecs struct {
	Graphmap *ebpf.MapSpec `ebpf:"graphmap"`
}

// graphObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadGraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type graphObjects struct {
	graphPrograms
	graphMaps
}

func (o *graphObjects) Close() error {
	return _GraphClose(
		&o.graphPrograms,
		&o.graphMaps,
	)
}

// graphMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadGraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type graphMaps struct {
	Graphmap *ebpf.Map `ebpf:"graphmap"`
}

func (m *graphMaps) Close() error {
	return _GraphClose(
		m.Graphmap,
	)
}

// graphPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadGraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type graphPrograms struct {
	IgTraceNet *ebpf.Program `ebpf:"ig_trace_net"`
}

func (p *graphPrograms) Close() error {
	return _GraphClose(
		p.IgTraceNet,
	)
}

func _GraphClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed graph_bpfel.o
var _GraphBytes []byte
