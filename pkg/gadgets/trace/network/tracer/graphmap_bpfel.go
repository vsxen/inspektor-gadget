// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type graphmapGraphKeyT struct {
	ContainerNetns uint64
	PktType        uint32
	Ip             uint32
	Proto          uint16
	Port           uint16
	_              [4]byte
}

// loadGraphmap returns the embedded CollectionSpec for graphmap.
func loadGraphmap() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_GraphmapBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load graphmap: %w", err)
	}

	return spec, err
}

// loadGraphmapObjects loads graphmap and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*graphmapObjects
//	*graphmapPrograms
//	*graphmapMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadGraphmapObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadGraphmap()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// graphmapSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type graphmapSpecs struct {
	graphmapProgramSpecs
	graphmapMapSpecs
}

// graphmapSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type graphmapProgramSpecs struct {
}

// graphmapMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type graphmapMapSpecs struct {
	Graphmap *ebpf.MapSpec `ebpf:"graphmap"`
}

// graphmapObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadGraphmapObjects or ebpf.CollectionSpec.LoadAndAssign.
type graphmapObjects struct {
	graphmapPrograms
	graphmapMaps
}

func (o *graphmapObjects) Close() error {
	return _GraphmapClose(
		&o.graphmapPrograms,
		&o.graphmapMaps,
	)
}

// graphmapMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadGraphmapObjects or ebpf.CollectionSpec.LoadAndAssign.
type graphmapMaps struct {
	Graphmap *ebpf.Map `ebpf:"graphmap"`
}

func (m *graphmapMaps) Close() error {
	return _GraphmapClose(
		m.Graphmap,
	)
}

// graphmapPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadGraphmapObjects or ebpf.CollectionSpec.LoadAndAssign.
type graphmapPrograms struct {
}

func (p *graphmapPrograms) Close() error {
	return _GraphmapClose()
}

func _GraphmapClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed graphmap_bpfel.o
var _GraphmapBytes []byte
