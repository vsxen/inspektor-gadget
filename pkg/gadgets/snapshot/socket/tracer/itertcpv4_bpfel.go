// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadIterTCPv4 returns the embedded CollectionSpec for iterTCPv4.
func loadIterTCPv4() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IterTCPv4Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load iterTCPv4: %w", err)
	}

	return spec, err
}

// loadIterTCPv4Objects loads iterTCPv4 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*iterTCPv4Objects
//	*iterTCPv4Programs
//	*iterTCPv4Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIterTCPv4Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIterTCPv4()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// iterTCPv4Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterTCPv4Specs struct {
	iterTCPv4ProgramSpecs
	iterTCPv4MapSpecs
}

// iterTCPv4Specs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterTCPv4ProgramSpecs struct {
	IgSnapTcp4 *ebpf.ProgramSpec `ebpf:"ig_snap_tcp4"`
}

// iterTCPv4MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterTCPv4MapSpecs struct {
}

// iterTCPv4Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIterTCPv4Objects or ebpf.CollectionSpec.LoadAndAssign.
type iterTCPv4Objects struct {
	iterTCPv4Programs
	iterTCPv4Maps
}

func (o *iterTCPv4Objects) Close() error {
	return _IterTCPv4Close(
		&o.iterTCPv4Programs,
		&o.iterTCPv4Maps,
	)
}

// iterTCPv4Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIterTCPv4Objects or ebpf.CollectionSpec.LoadAndAssign.
type iterTCPv4Maps struct {
}

func (m *iterTCPv4Maps) Close() error {
	return _IterTCPv4Close()
}

// iterTCPv4Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIterTCPv4Objects or ebpf.CollectionSpec.LoadAndAssign.
type iterTCPv4Programs struct {
	IgSnapTcp4 *ebpf.Program `ebpf:"ig_snap_tcp4"`
}

func (p *iterTCPv4Programs) Close() error {
	return _IterTCPv4Close(
		p.IgSnapTcp4,
	)
}

func _IterTCPv4Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed itertcpv4_bpfel.o
var _IterTCPv4Bytes []byte
